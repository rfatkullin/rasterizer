(()=>{"use strict";var t=function(){return t=Object.assign||function(t){for(var i,o=1,n=arguments.length;o<n;o++)for(var a in i=arguments[o])Object.prototype.hasOwnProperty.call(i,a)&&(t[a]=i[a]);return t},t.apply(this,arguments)},i=function(t,i,o){if(o||2===arguments.length)for(var n,a=0,r=i.length;a<r;a++)!n&&a in i||(n||(n=Array.prototype.slice.call(i,0,a)),n[a]=i[a]);return t.concat(n||Array.prototype.slice.call(i))};(new(function(){function o(){this.CANVAS_WIDTH=800,this.CANVAS_HEIGHT=600,this.BLACK_COLOR={r:0,g:0,b:0,a:255},this._pixelData=null,this._canvas=null,this._context=null,this._drawPoints=[]}return o.prototype.init=function(){this._canvas=document.getElementById("rastCanvas"),this._context=this._canvas.getContext("2d"),this._pixelData=this._context.getImageData(0,0,this.CANVAS_WIDTH,this.CANVAS_HEIGHT),this.addHandlers(),this.drawInit()},o.prototype.addHandlers=function(){this.onMouseDownHandler=this.onMouseDownHandler.bind(this),this.onKeyDownHandler=this.onKeyDownHandler.bind(this),this._canvas.addEventListener("mousedown",this.onMouseDownHandler,!1),document.addEventListener("keydown",this.onKeyDownHandler,!1)},o.prototype.onMouseDownHandler=function(t){var i={x:t.clientX-this._canvas.offsetLeft,y:t.clientY-this._canvas.offsetTop};this.addDrawPoint(i)},o.prototype.addDrawPoint=function(t){this._drawPoints.push(t),this._drawPoints.length>3&&this._drawPoints.shift(),this.drawPoint(t.x,t.y,this.BLACK_COLOR),this.drawPoint(t.x-1,t.y,this.BLACK_COLOR),this.drawPoint(t.x+1,t.y,this.BLACK_COLOR),this.drawPoint(t.x,t.y-1,this.BLACK_COLOR),this.drawPoint(t.x,t.y+1,this.BLACK_COLOR),this._context.putImageData(this._pixelData,0,0)},o.prototype.onKeyDownHandler=function(t){"Space"===t.code&&this.draw()},o.prototype.drawInit=function(){this.fillBackground(),this._context.putImageData(this._pixelData,0,0)},o.prototype.draw=function(){this.fillBackground(),this.drawPrimitives(),this._context.putImageData(this._pixelData,0,0)},o.prototype.drawPrimitives=function(){this._drawPoints.length<2||(2==this._drawPoints.length?this.drawLine(this._drawPoints[0],this._drawPoints[1]):(this.drawFilledTriangle(this._drawPoints[0],this._drawPoints[1],this._drawPoints[2]),this.drawLine(this._drawPoints[0],this._drawPoints[1]),this.drawLine(this._drawPoints[1],this._drawPoints[2]),this.drawLine(this._drawPoints[2],this._drawPoints[0])),this._drawPoints=[])},o.prototype.drawRandomLineWithNativeFunc=function(){var t=this.getRandomPoint(),i=this.getRandomPoint();this._context.moveTo(t.x,t.y),this._context.lineTo(i.x,i.y),this._context.stroke()},o.prototype.drawLine=function(t,i){var o,n;if(t.x!==i.x)if(Math.abs(t.x-i.x)>Math.abs(t.y-i.y)){t.x>i.x&&(i=(o=[t,i])[0],t=o[1]);for(var a=(i.y-t.y)/(i.x-t.x),r=this.getIterated(t.x,i.x,t.y,a),e=0;e<i.x-t.x;++e)this.drawPoint(t.x+e,r[e],this.BLACK_COLOR)}else for(t.y>i.y&&(i=(n=[t,i])[0],t=n[1]),a=(i.x-t.x)/(i.y-t.y),r=this.getIterated(t.y,i.y,t.x,a),e=0;e<i.y-t.y;++e)this.drawPoint(r[e],t.y+e,this.BLACK_COLOR)},o.prototype.drawFilledTriangle=function(t,o,n){var a,r,e,s,h;t.y>o.y&&(o=(a=[t,o])[0],t=a[1]),o.y>n.y&&(n=(r=[o,n])[0],o=r[1]),t.y>o.y&&(o=(e=[t,o])[0],t=e[1]);var d=this.getIterated(t.y,o.y,t.x,(o.x-t.x)/(o.y-t.y)),y=this.getIterated(o.y,n.y,o.x,(n.x-o.x)/(n.y-o.y)),l=this.getIterated(t.y,n.y,t.x,(n.x-t.x)/(n.y-t.y));d.pop();var p=i(i([],d,!0),y,!0),_=l,c=this.getRandomColor(),w=this.getRandomColor(),f=this.getRandomColor(),u=this.getIteratedColor(t.y,o.y,c,w),x=this.getIteratedColor(o.y,n.y,w,f),g=this.getIteratedColor(t.y,n.y,c,f);u.pop();var C=i(i([],u,!0),x,!0),v=g,P=Math.floor(p.length/2);p[P]>_[P]&&(p=(s=[_,p])[0],_=s[1],C=(h=[v,C])[0],v=h[1]);for(var A=0;A<=n.y-t.y;++A)for(var I=Math.floor(p[A]),D=Math.floor(_[A]),L=this.getIteratedColor(I,D,C[A],v[A]),m=I;m<=D;++m){var H=m-I;this.drawPoint(m,t.y+A,L[H])}},o.prototype.getRandomColor=function(){return{r:255*Math.random(),g:255*Math.random(),b:255*Math.random(),a:255}},o.prototype.getIterated=function(t,i,o,n){for(var a=[],r=o,e=t;e<=i;++e)a.push(r),r+=n;return a},o.prototype.getIteratedColor=function(i,o,n,a){for(var r=[],e=o-i,s=(a.r-n.r)/e,h=(a.g-n.g)/e,d=(a.b-n.b)/e,y=t({},n),l=i;l<=o;++l)r.push(t({},y)),y.r+=s,y.g+=h,y.b+=d;return r},o.prototype.getRandomPoint=function(){return{x:Math.floor(Math.random()*this.CANVAS_WIDTH),y:Math.floor(Math.random()*this.CANVAS_HEIGHT)}},o.prototype.fillBackground=function(){for(var t=this._pixelData.data,i=0;i<this.CANVAS_WIDTH;++i)for(var o=0;o<this.CANVAS_HEIGHT;++o){var n=4*(o*this.CANVAS_WIDTH+i);t[n]=255,t[n+1]=255,t[n+2]=255,t[n+3]=255}},o.prototype.drawPoint=function(t,i,o){var n=this._pixelData.data;t=Math.floor(t);var a=4*((i=Math.floor(i))*this.CANVAS_WIDTH+t);n[a]=o.r,n[a+1]=o.g,n[a+2]=o.b,n[a+3]=255},o}())).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,