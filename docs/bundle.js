(()=>{"use strict";var t=function(){function t(t,e,r){this.x=t,this.y=e,this.z=r,this._length=null,this._lenghtSquared=null}return Object.defineProperty(t.prototype,"length",{get:function(){return null==this._length&&this.calculateLength(),this._length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lengthSquared",{get:function(){return null==this._length&&this.calculateLength(),this._lenghtSquared},enumerable:!1,configurable:!0}),t.prototype.getNormalized=function(){return new t(this.x/this.length,this.y/this.length,this.z/this.length)},t.prototype.sub=function(e){return new t(this.x-e.x,this.y-e.y,this.z-e.z)},t.prototype.add=function(e){return new t(this.x+e.x,this.y+e.y,this.z+e.z)},t.prototype.multiplyScalar=function(e){return new t(this.x*e,this.y*e,this.z*e)},t.prototype.dotProduct=function(t){return this.x*t.x+this.y*t.y+this.z*t.z},t.prototype.crossProduct=function(e){return new t(this.y*e.z-this.z*e.y,this.z*e.x-this.x*e.z,this.x*e.y-this.y*e.x)},t.prototype.calculateLength=function(){this._lenghtSquared=this.dotProduct(this),this._length=Math.sqrt(this._lenghtSquared)},t}(),e=function(){function e(){}return e.mult=function(t,e){var r=t.length,n=t[0].length,i=e.length;if(n!=i)throw new Error("Matrix by vector multiplication has wrong dimensions.");for(var o=[],a=0;a<r;a++){for(var s=0,l=0;l<i;l++)s+=t[a][l]*e[l];o.push(s)}return o},e.interpolateNormals=function(e,r,n){var i=new t(r.x-e.x,r.y-e.y,r.z-e.z);return new t(e.x+n*i.x,e.y+n*i.y,e.z+n*i.z).getNormalized()},e.transpose=function(t){for(var e=[],r=0;r<t[0].length;r++)e[r]=[];for(r=0;r<t.length;r++)for(var n=0;n<t[r].length;n++)e[n][r]=t[r][n];return e},e.inverse3by3Matrix=function(t){var e=1/this.getDeterminant3by3(t);return[[this.getDeterminant2by2(t[1][1],t[1][2],t[2][1],t[2][2])*e,this.getDeterminant2by2(t[0][2],t[0][1],t[2][2],t[2][1])*e,this.getDeterminant2by2(t[0][1],t[0][2],t[1][1],t[1][2])*e],[this.getDeterminant2by2(t[1][2],t[1][0],t[2][2],t[2][0])*e,this.getDeterminant2by2(t[0][0],t[0][2],t[2][0],t[2][2])*e,this.getDeterminant2by2(t[0][2],t[0][0],t[1][2],t[1][0])*e],[this.getDeterminant2by2(t[1][0],t[1][1],t[2][0],t[2][1])*e,this.getDeterminant2by2(t[0][1],t[0][0],t[2][1],t[2][0])*e,this.getDeterminant2by2(t[0][0],t[0][1],t[1][0],t[1][1])*e]]},e.getDeterminant3by3=function(t){return t[0][0]*this.getDeterminant2by2(t[1][1],t[1][2],t[2][1],t[2][2])-t[0][1]*this.getDeterminant2by2(t[1][0],t[1][2],t[2][0],t[2][2])+t[0][2]*this.getDeterminant2by2(t[1][0],t[1][1],t[2][0],t[2][1])},e.getDeterminant2by2=function(t,e,r,n){return t*n-e*r},e.getSubMatrix=function(t,e,r){for(var n=[],i=0;i<e;i++)n.push(t[i].slice(0,r));return n},e.multMatrix=function(t,e){var r=t.length,n=t[0].length,i=e.length,o=e[0].length;if(n!=i)throw new Error("Matrix by matrix multiplication has wrong dimensions.");for(var a=[],s=0;s<r;s++){for(var l=[],h=0;h<o;h++){for(var u=0,c=0;c<n;c++)u+=t[s][c]*e[c][h];l.push(u)}a.push(l)}return a},e}(),r=function(){function t(t,e){this.normal=t,this.distance=e}return t.prototype.isInFront=function(t){return this.normal.dotProduct(t)+this.distance>Number.EPSILON},t.prototype.distanceTo=function(t){return Math.abs(this.normal.dotProduct(t)+this.distance)/this.normal.length},t.prototype.getSegmentIntersection=function(t,e){var r=e.sub(t),n=this.normal.dotProduct(r);if(Math.abs(n)<Number.EPSILON)return null;var i=-(this.normal.dotProduct(t)+this.distance)/n;return{point:t.add(r.multiplyScalar(i)),t:i}},t}(),n=function(t,e,r){this.indices=t,this.colors=e,this.normals=r},i=function(){function t(t,e,r){this.r=t,this.g=e,this.b=r}return t.Black={r:0,g:0,b:0},t.Blue={r:0,g:0,b:1},t.Green={r:0,g:1,b:0},t.Red={r:1,g:0,b:0},t.Yellow={r:.93,g:.83,b:.03},t.Purple={r:.72,g:.25,b:1},t.Cyan={r:.074,g:.85,b:.91},t}(),o=function(){function t(){}return t.add=function(t,e){return new i(Math.min(t.r+e.r,1),Math.min(t.g+e.g,1),Math.min(t.b+e.b,1))},t.getColorByName=function(t){switch(t){case"red":return i.Red;case"blue":return i.Blue;case"green":return i.Green;case"purple":return i.Purple;case"yellow":return i.Yellow;case"cyan":return i.Cyan;default:return i.Black}},t.interpolate=function(t,e,r){var n=new i(e.r-t.r,e.g-t.g,e.b-t.b);return new i(t.r+r*n.r,t.g+r*n.g,t.b+r*n.b)},t.generateRandomColorNames=function(t){for(var e=[],r=0;r<t;r++)e.push(this.getRandomColorName());return e},t.getRandomColorName=function(){switch(Math.floor(7*Math.random())){case 0:return"red";case 1:return"blue";case 2:return"green";case 3:return"purple";case 4:return"yellow";case 5:return"cyan";default:return"black"}},t}(),a=function(){function e(t,e){this.center=t,this.radius=e,this._radiusSquared=e*e}return Object.defineProperty(e.prototype,"isDummy",{get:function(){return this.radius<Number.EPSILON},enumerable:!1,configurable:!0}),e.prototype.isIn=function(t){return this.center.sub(t).lengthSquared<this._radiusSquared+Number.EPSILON},e.Dummy=new e(new t(0,0,0),0),e}(),s=function(){function t(){}return t.getBoundingSphere=function(t){return this.welzlForSphere(function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))}([],t,!0),[])},t.welzlForSphere=function(t,e){if(0==t.length)return this.getSphereWithTrivialAlgorithm(e);var r=Math.floor(Math.random()*t.length),n=t.splice(r,1),i=this.welzlForSphere(t,e);return i.isIn(n[0])?i:(e.push(n[0]),this.welzlForSphere(t,e))},t.getSphereWithTrivialAlgorithm=function(t){return t.length<=1?a.Dummy:t.length<=2?this.getSphereByTwoPoints(t[0],t[1]):this.getSphereByThreePoints(t[0],t[1],t[2])},t.getSphereByTwoPoints=function(t,e){var r=e.sub(t),n=r.length/2,i=t.add(r.multiplyScalar(.5));return new a(i,n)},t.getSphereByThreePoints=function(t,e,r){var n=e.sub(t),i=r.sub(t),o=t.sub(e),s=r.sub(e),l=t.sub(r),h=e.sub(r),u=n.crossProduct(s),c=1/(2*u.lengthSquared),g=s.lengthSquared*n.dotProduct(i)*c,p=i.lengthSquared*o.dotProduct(s)*c,d=n.lengthSquared*l.dotProduct(h)*c,y=t.multiplyScalar(g).add(e.multiplyScalar(p)).add(r.multiplyScalar(d)),f=n.length*s.length*l.length/(2*u.length);return new a(y,f)},t}(),l=function(t,e,r,n){this.inVertexIndex=t,this.outVertexIndex=e,this.intersectionPoint=r,this.t=n},h=function(){function i(t){this._planes=this.prepareClippingPlanes(t)}return i.prototype.clip=function(t,e){for(var r=s.getBoundingSphere(t),n=0,i=this._planes;n<i.length;n++){var o=i[n],a=o.distanceTo(r.center);if(r.radius>a+Number.EPSILON)e=this.clipTriangles(o,t,e);else if(!o.isInFront(r.center))return[]}return e},i.prototype.clipTriangles=function(t,e,r){for(var i=[],o=0,a=r;o<a.length;o++){var s=a[o],l=this.clipTriangleByPlane(t,e,s);if(null!==l)if(l instanceof n)i.push(s);else{var h=e.length;if(e.push(l[0].intersectionPoint),e.push(l[1].intersectionPoint),l[1].inVertexIndex>=h){var u=this.getColorByVertexIndex(s,l[0].inVertexIndex),c=this.getInterpolatedColorByVertexIndices(s,l[0].inVertexIndex,l[0].outVertexIndex,l[0].t),g=this.getInterpolatedColorByVertexIndices(s,l[0].inVertexIndex,l[1].outVertexIndex,l[1].t),p=this.getNormalByVertexIndex(s,l[0].inVertexIndex),d=this.getInterpolatedNormalByVertexIndices(s,l[0].inVertexIndex,l[0].outVertexIndex,l[0].t),y=this.getInterpolatedNormalByVertexIndices(s,l[0].inVertexIndex,l[1].outVertexIndex,l[1].t);i.push(new n([l[0].inVertexIndex,h,h+1],[u,c,g],[p,d,y]))}else{u=this.getColorByVertexIndex(s,l[0].inVertexIndex),c=this.getInterpolatedColorByVertexIndices(s,l[0].inVertexIndex,l[0].outVertexIndex,l[0].t),g=this.getColorByVertexIndex(s,l[1].inVertexIndex);var f=this.getInterpolatedColorByVertexIndices(s,l[1].inVertexIndex,l[1].outVertexIndex,l[1].t),x=(p=this.getNormalByVertexIndex(s,l[0].inVertexIndex),d=this.getInterpolatedNormalByVertexIndices(s,l[0].inVertexIndex,l[0].outVertexIndex,l[0].t),y=this.getNormalByVertexIndex(s,l[1].inVertexIndex),this.getInterpolatedNormalByVertexIndices(s,l[1].inVertexIndex,l[1].outVertexIndex,l[1].t));i.push(new n([l[0].inVertexIndex,h,h+1],[u,c,f],[p,d,x])),i.push(new n([l[0].inVertexIndex,h+1,l[1].inVertexIndex],[u,f,g],[p,x,y]))}}}return i},i.prototype.getColorByVertexIndex=function(t,e){return t.colors[t.indices.findIndex((function(t){return t===e}))]},i.prototype.getInterpolatedColorByVertexIndices=function(t,e,r,n){var i=this.getColorByVertexIndex(t,e),a=this.getColorByVertexIndex(t,r);return o.interpolate(i,a,n)},i.prototype.getNormalByVertexIndex=function(t,e){return t.normals[t.indices.findIndex((function(t){return t===e}))]},i.prototype.getInterpolatedNormalByVertexIndices=function(t,r,n,i){var o=this.getNormalByVertexIndex(t,r),a=this.getNormalByVertexIndex(t,n);return e.interpolateNormals(o,a,i)},i.prototype.clipTriangleByPlane=function(t,e,r){var n=r.indices.filter((function(r){return t.isInFront(e[r])}));if(3===n.length)return r;if(0===n.length)return null;var i=r.indices.filter((function(t){return n.indexOf(t)<0}));return 1===n.length?this.getIntersectionsForSinglePointInFront(t,e,n,i):this.getIntersectionsForTwoPointsInFront(t,e,n,i)},i.prototype.getIntersectionsForSinglePointInFront=function(t,e,r,n){var i=[],o=e[r[0]],a=e[n[0]],s=e[n[1]],h=t.getSegmentIntersection(o,a);return i.push(new l(r[0],n[0],h.point,h.t)),h=t.getSegmentIntersection(o,s),i.push(new l(r[0],n[1],h.point,h.t)),i},i.prototype.getIntersectionsForTwoPointsInFront=function(t,e,r,n){var i=[],o=e[r[0]],a=e[r[1]],s=e[n[0]],h=t.getSegmentIntersection(o,s);return i.push(new l(r[0],n[0],h.point,h.t)),h=t.getSegmentIntersection(a,s),i.push(new l(r[1],n[0],h.point,h.t)),i},i.prototype.prepareClippingPlanes=function(e){var n=Math.sin(e.horizontalFov/2),i=Math.cos(e.horizontalFov/2),o=Math.sin(e.verticalFov/2),a=Math.cos(e.verticalFov/2);return[new r(new t(0,0,1),-e.near),new r(new t(0,0,-1),e.far),new r(new t(i,0,n),0),new r(new t(-i,0,n),0),new r(new t(0,o,a),0),new r(new t(0,-o,a),0)]},i}(),u=function(){function t(t,e){if(this.width=t,this.height=e,t<Number.EPSILON||e<Number.EPSILON)throw new Error("[CanvasSettings]: Canvas width or height is corrupted. Width: ".concat(t,". Height: ").concat(e,"."))}return Object.defineProperty(t.prototype,"aspectRatio",{get:function(){return this.width/this.height},enumerable:!1,configurable:!0}),t}(),c=function(){function t(){}return t.PixelsDataComponentsNumber=4,t}(),g=function(){function t(t){this._canvasSettings=t}return t.prototype.apply=function(t){for(var e=t.copyWithin(0,0),r=c.PixelsDataComponentsNumber,n=0;n<e.length;n+=r){for(var i=0,o=0,a=0,s=[n,n-r*this._canvasSettings.width,n-r*this._canvasSettings.width-r,n-r*this._canvasSettings.width+r,n-r,n+r,n+r*this._canvasSettings.width,n+r*this._canvasSettings.width-r,n+r*this._canvasSettings.width+r],l=0,h=s=s.filter((function(t){return t>=0&&t<e.length}));l<h.length;l++){var u=h[l];i+=e[u],o+=e[u+1],a+=e[u+2]}var g=s.length;t[n]=Math.round(i/g),t[n+1]=Math.round(o/g),t[n+2]=Math.round(a/g)}},t}(),p=function(){function t(){}return t.UseFilters=!1,t}(),d=function(){return d=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},d.apply(this,arguments)},y=function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},f=function(){function e(t,e,r){this._context=t,this._canvasSettings=e,this._filters=r,this._pixelData=null,this._depthBuffer=new Map,p.UseFilters||(this._filters=[]),this._pixelData=this._context.getImageData(0,0,this._canvasSettings.width,this._canvasSettings.height),this.clear()}return e.prototype.clear=function(){this.fillBackground(),this._context.putImageData(this._pixelData,0,0),this._depthBuffer=new Map},e.prototype.flush=function(){for(var t=0,e=this._filters;t<e.length;t++)e[t].apply(this._pixelData.data);this._context.putImageData(this._pixelData,0,0)},e.prototype.drawPoint=function(t,e,r,n){var i=1e4*(t=Math.floor(t))+(e=Math.floor(e));if(!(this._depthBuffer.has(i)&&this._depthBuffer.get(i)>=r)){this._depthBuffer.set(i,r);var o=4*(e*this._canvasSettings.width+t),a=this._pixelData.data;a[o]=255*n.r,a[o+1]=255*n.g,a[o+2]=255*n.b,a[o+3]=255}},e.prototype.drawLine=function(t,e,r,n){t.x!==e.x?t.y!==e.y?Math.abs(t.x-e.x)>Math.abs(t.y-e.y)?this.drawLineByOx(t,e,r,n):this.drawLineByOy(t,e,r,n):this.drawHorizontalLine(t,e,r,n):this.drawVerticalLine(t,e,r,n)},e.prototype.drawLineByOx=function(t,e,r,n){var i,o;t.x>e.x&&(e=(i=[t,e])[0],t=i[1],r=(o=[n,r])[0],n=o[1]);for(var a=(e.y-t.y)/(e.x-t.x),s=this.getIterated(t.x,e.x,t.y,a),l=(e.z-t.z)/(e.x-t.x),h=this.getIterated(t.x,e.x,t.z,l),u=this.getIteratedColor(t.x,e.x,r,n),c=0;c<e.x-t.x;++c)this.drawPoint(t.x+c,s[c],h[c],u[c])},e.prototype.drawLineByOy=function(t,e,r,n){var i,o;t.y>e.y&&(e=(i=[t,e])[0],t=i[1],r=(o=[n,r])[0],n=o[1]);for(var a=(e.x-t.x)/(e.y-t.y),s=this.getIterated(t.y,e.y,t.x,a),l=(e.z-t.z)/(e.y-t.y),h=this.getIterated(t.y,e.y,t.z,l),u=this.getIteratedColor(t.y,e.y,r,n),c=0;c<e.y-t.y;++c)this.drawPoint(s[c],t.y+c,h[c],u[c])},e.prototype.drawVerticalLine=function(t,e,r,n){var i,o;t.y>e.y&&(e=(i=[t,e])[0],t=i[1],r=(o=[n,r])[0],n=o[1]);for(var a=(e.z-t.z)/(e.y-t.y),s=this.getIterated(t.y,e.y,t.z,a),l=this.getIteratedColor(t.y,e.y,r,n),h=0;h<e.y-t.y;++h)this.drawPoint(t.x,t.y+h,s[h],l[h])},e.prototype.drawHorizontalLine=function(t,e,r,n){var i,o;t.x>e.x&&(e=(i=[t,e])[0],t=i[1],r=(o=[n,r])[0],n=o[1]);for(var a=(e.z-t.z)/(e.x-t.x),s=this.getIterated(t.x,e.x,t.z,a),l=this.getIteratedColor(t.x,e.x,r,n),h=0;h<e.x-t.x;++h)this.drawPoint(t.x+h,t.y,s[h],l[h])},e.prototype.drawFilledTriangle=function(e,r,n,i,o,a){var s,l,h,u,c,g,p,d,y;e=new t(Math.floor(e.x),Math.floor(e.y),e.z),r=new t(Math.floor(r.x),Math.floor(r.y),r.z),n=new t(Math.floor(n.x),Math.floor(n.y),n.z),e.y>r.y&&(r=(s=[e,r])[0],e=s[1],o=(l=[i,o])[0],i=l[1]),r.y>n.y&&(n=(h=[r,n])[0],r=h[1],a=(u=[o,a])[0],o=u[1]),e.y>r.y&&(r=(c=[e,r])[0],e=c[1],o=(g=[i,o])[0],i=g[1]);var f=this.getInterpolatedX(e,r,n),x=f.left,m=f.right,v=this.getInterpolatedZ(e,r,n),w=v.left,I=v.right,b=this.getInterpolatedColors(e,r,n,i,o,a),S=b.left,z=b.right,V=Math.floor(x.length/2);x[V]>m[V]&&(x=(p=[m,x])[0],m=p[1],w=(d=[I,w])[0],I=d[1],S=(y=[z,S])[0],z=y[1]);for(var M=0;M<=n.y-e.y;++M)for(var _=Math.floor(x[M]),P=Math.floor(m[M]),N=this.getIteratedColor(_,P,S[M],z[M]),C=this.getIterated(_,P,w[M],(I[M]-w[M])/(P-_)),B=_;B<=P;++B){var F=B-_;this.drawPoint(B,e.y+M,C[F],N[F])}},e.prototype.getInterpolatedX=function(t,e,r){var n=this.getIterated(t.y,e.y,t.x,(e.x-t.x)/(e.y-t.y)),i=this.getIterated(e.y,r.y,e.x,(r.x-e.x)/(r.y-e.y)),o=this.getIterated(t.y,r.y,t.x,(r.x-t.x)/(r.y-t.y));return n.pop(),{left:y(y([],n,!0),i,!0),right:o}},e.prototype.getInterpolatedZ=function(t,e,r){var n=this.getIterated(t.y,e.y,t.z,(e.z-t.z)/(e.y-t.y)),i=this.getIterated(e.y,r.y,e.z,(r.z-e.z)/(r.y-e.y)),o=this.getIterated(t.y,r.y,t.z,(r.z-t.z)/(r.y-t.y));return n.pop(),{left:y(y([],n,!0),i,!0),right:o}},e.prototype.getInterpolatedColors=function(t,e,r,n,i,o){var a=this.getIteratedColor(t.y,e.y,n,i),s=this.getIteratedColor(e.y,r.y,i,o),l=this.getIteratedColor(t.y,r.y,n,o);return a.pop(),{left:y(y([],a,!0),s,!0),right:l}},e.prototype.getIterated=function(t,e,r,n){for(var i=[],o=r,a=t;a<=e;++a)i.push(o),o+=n;return i},e.prototype.getIteratedColor=function(t,e,r,n){for(var i=[],o=e-t,a=(n.r-r.r)/o,s=(n.g-r.g)/o,l=(n.b-r.b)/o,h=d({},r),u=t;u<=e;++u)i.push(d({},h)),h.r+=a,h.g+=s,h.b+=l;return i},e.prototype.fillBackground=function(){for(var t=this._pixelData.data,e=0;e<this._canvasSettings.width;++e)for(var r=0;r<this._canvasSettings.height;++r){var n=4*(r*this._canvasSettings.width+e);t[n]=255,t[n+1]=255,t[n+2]=255,t[n+3]=255}},e}(),x=function(t,e,r,n){this.figures=t,this.instances=e,this.camera=r,this.lighting=n};const m=JSON.parse('{"iI":[{"name":"cube","vertices":[[1,1,1,1],[-1,1,1,1],[-1,-1,1,1],[1,-1,1,1],[1,1,-1,1],[-1,1,-1,1],[-1,-1,-1,1],[1,-1,-1,1]],"triangles":[{"indices":[0,1,2],"colors":["cyan","blue","red"],"normals":[[0,0,1],[0,0,1],[0,0,1]]},{"indices":[0,2,3],"colors":["yellow","purple","cyan"],"normals":[[0,0,1],[0,0,1],[0,0,1]]},{"indices":[4,0,3],"colors":["yellow","yellow","yellow"],"normals":[[1,0,0],[1,0,0],[1,0,0]]},{"indices":[4,3,7],"colors":["yellow","yellow","yellow"],"normals":[[1,0,0],[1,0,0],[1,0,0]]},{"indices":[5,4,7],"colors":["black","yellow","purple"],"normals":[[0,0,-1],[0,0,-1],[0,0,-1]]},{"indices":[5,7,6],"colors":["cyan","blue","red"],"normals":[[0,0,-1],[0,0,-1],[0,0,-1]]},{"indices":[1,5,6],"colors":["green","black","yellow"],"normals":[[-1,0,0],[-1,0,0],[-1,0,0]]},{"indices":[1,6,2],"colors":["cyan","blue","red"],"normals":[[-1,0,0],[-1,0,0],[-1,0,0]]},{"indices":[4,5,1],"colors":["cyan","green","red"],"normals":[[0,1,0],[0,1,0],[0,1,0]]},{"indices":[4,1,0],"colors":["cyan","blue","red"],"normals":[[0,1,0],[0,1,0],[0,1,0]]},{"indices":[2,6,7],"colors":["blue","blue","red"],"normals":[[0,-1,0],[0,-1,0],[0,-1,0]]},{"indices":[2,7,3],"colors":["cyan","blue","red"],"normals":[[0,-1,0],[0,-1,0],[0,-1,0]]}]}],"as":[{"name":"cube","scale":{"x":5,"y":5,"z":5},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":35,"y":0,"z":50}},{"name":"cube","scale":{"x":5,"y":5,"z":5},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":-35,"y":0,"z":50}},{"name":"cube","scale":{"x":5,"y":5,"z":5},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":0,"y":-20,"z":50}},{"name":"cube","scale":{"x":5,"y":5,"z":5},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":0,"y":20,"z":50}},{"name":"cube","scale":{"x":5,"y":5,"z":5},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":35,"y":20,"z":50}},{"name":"cube","scale":{"x":5,"y":5,"z":5},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":-35,"y":20,"z":50}},{"name":"cube","scale":{"x":5,"y":5,"z":5},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":-35,"y":-20,"z":50}},{"name":"cube","scale":{"x":5,"y":5,"z":5},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":35,"y":-20,"z":50}},{"name":"sphere","scale":{"x":50,"y":50,"z":50},"rotation":{"x":0,"y":0,"z":0},"translate":{"x":0,"y":0,"z":60}}],"nS":{"F":{"x":0,"y":0,"z":0},"o":{"fovInDegrees":90,"near":10,"far":200}},"hI":{"d":{"r":0.2,"g":0.2,"b":0.2},"p":[{"direction":{"x":0,"y":-1,"z":-1},"color":{"r":0.5,"g":0.5,"b":0.5}}]}}');var v=function(t,e){this.position=t,this.frustum=e},w=function(t,e,r,n){this.name=t,this.scale=e,this.rotation=r,this.translate=n},I=function(t,e,r,n,i,o){this.horizontalFov=t,this.verticalFov=e,this.near=r,this.far=n,this.nearPlaneWidth=i,this.nearPlaneHeight=o},b=function(){function t(){}return t.toRadians=function(t){return t/180*Math.PI},t}(),S=function(){function t(){}return t.UseSphereBounding=!0,t.OnlyWired=!1,t.SphereDetalizationFactor=40,t}(),z=function(){function t(){}return t.generateSphereMesh=function(t,e){var r=S.SphereDetalizationFactor,n=S.SphereDetalizationFactor,i=this.generateUnitSphereVertices(r,n);return{name:t,vertices:i,triangles:this.generateSphereTriangles(i,n,e)}},t.generateUnitSphereVertices=function(t,e){var r=.5,n=[];n.push([0,-.5,0,1]);for(var i=1;i<t;i++){var o=(i/t-.5)*Math.PI,a=r;Math.abs(o)>Number.EPSILON&&(a=r*Math.cos(o));for(var s=r*Math.sin(o),l=0;l<e;l++){var h=l/e*2*Math.PI,u=a*Math.sin(h),c=a*Math.cos(h);n.push([c,s,u,1])}}return n.push([0,r,0,1]),n},t.generateSphereTriangles=function(t,e,r){for(var n=[],i=[r,r,r],o=0;o<e;o++){var a=0,s=o+1,l=(o+1)%e+1;n.push({indices:[a,s,l],colors:i,normals:[this.getSphereVertexNormal(t[a]),this.getSphereVertexNormal(t[s]),this.getSphereVertexNormal(t[l])]})}for(o=e+1;o<t.length-1;o++){a=o-e,s=o,l=o+1;var h=o-e+1;o%e==0&&(l-=e,h-=e),n.push({indices:[a,s,l],colors:i,normals:[this.getSphereVertexNormal(t[a]),this.getSphereVertexNormal(t[s]),this.getSphereVertexNormal(t[l])]}),n.push({indices:[h,a,l],colors:i,normals:[this.getSphereVertexNormal(t[h]),this.getSphereVertexNormal(t[a]),this.getSphereVertexNormal(t[l])]})}for(o=t.length-1-e;o<t.length-1;o++)a=t.length-1,s=o,l=o+1==t.length-1?t.length-1-e:o+1,n.push({indices:[a,s,l],colors:i,normals:[this.getSphereVertexNormal(t[a]),this.getSphereVertexNormal(t[s]),this.getSphereVertexNormal(t[l])]});return n},t.getSphereVertexNormal=function(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);return[t[0]/e,t[1]/e,t[2]/e]},t}(),V=function(t,e,r){this.name=t,this.vertices=e,this.triangles=r},M=function(t,e,r){this.indices=t,this.colors=e,this.normals=r},_=function(t,e){this.ambient=t,this.directs=e},P=function(t,e){this.direction=t,this.color=e},N=function(){function e(){}return e.loadScene=function(t){var e=this,r=this.getViewFrustum(t,m.nS.o),n=new v(this.getPoint3f(m.nS.F),r),o=new _(new i(m.hI.d.r,m.hI.d.g,m.hI.d.b),m.hI.p.map((function(t){return new P(e.getPoint3f(t.direction),new i(t.color.r,t.color.g,t.color.b))}))),a=m.as.map((function(t){return new w(t.name,e.getPoint3f(t.scale),e.getPoint3f(t.rotation),e.getPoint3f(t.translate))}));return m.iI.push(z.generateSphereMesh("sphere","green")),new x(this.mapFigures(m.iI),a,n,o)},e.mapFigures=function(t){for(var e=[],r=0,n=t;r<n.length;r++){for(var i=n[r],a=[],s=0,l=i.triangles;s<l.length;s++){var h=l[s],u=h.colors.map((function(t){return o.getColorByName(t)})),c=new M(h.indices,u,h.normals);a.push(c)}e.push(new V(i.name,i.vertices,a))}return e},e.getPoint3f=function(e){return new t(e.x,e.y,e.z)},e.getViewFrustum=function(t,e){var r=b.toRadians(e.fovInDegrees),n=2*e.near*Math.tan(r/2),i=n/t,o=2*Math.atan(i/(2*e.near));return new I(r,o,e.near,e.far,n,i)},e}(),C=function(){function t(t,e){this._light=t,this._camera=e}return t.prototype.calculateColor=function(t,e,r){var n=new i(r.r*this._light.ambient.r,r.g*this._light.ambient.g,r.b*this._light.ambient.b),a=new i(0,0,0);a=o.add(a,n);for(var s=0,l=this._light.directs;s<l.length;s++){var h=l[s];a=o.add(a,this.calculteDiffuse(h,e));var u=this._camera.position.sub(t);a=o.add(a,this.calculteSpecular(h,e,u))}return new i(r.r*a.r,r.g*a.g,r.b*a.b)},t.prototype.calculteDiffuse=function(t,e){var r=Math.max(t.direction.dotProduct(e)/t.direction.length,0);return new i(r*t.color.r,r*t.color.g,r*t.color.b)},t.prototype.calculteSpecular=function(t,e,r){var n=e.multiplyScalar(2*e.dotProduct(t.direction)).sub(t.direction),o=Math.max(n.dotProduct(r)/(n.length*r.length),0),a=Math.pow(o,10);return new i(a*t.color.r,a*t.color.g,a*t.color.b)},t}(),B=function(){function t(){}return t.getTranslationMatrix=function(t){return[[1,0,0,t.x],[0,1,0,t.y],[0,0,1,t.z],[0,0,0,1]]},t.getUniformScaleMatrix=function(t){return[[t,0,0,0],[0,t,0,0],[0,0,t,0],[0,0,0,1]]},t.getScaleMatrix=function(t){return[[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]]},t.getRotationMatrix=function(t){var e=this.degreeToRadian(t.x),r=this.degreeToRadian(t.y),n=this.degreeToRadian(t.z),i=Math.sin(e),o=Math.cos(e),a=Math.sin(r),s=Math.cos(r),l=Math.sin(n),h=Math.cos(n);return[[s*h,i*a*h-o*l,o*a*h+i*l,0],[s*l,i*a*l+o*h,o*a*l-i*h,0],[-a,i*s,o*s,0],[0,0,0,1]]},t.degreeToRadian=function(t){return t/180*Math.PI},t}(),F=function(){function r(t,e,r,n){this._scene=t,this._clipper=e,this._rasterizer=r,this._canvasSettings=n,this._lightCalculator=new C(t.lighting,t.camera)}return r.prototype.start=function(){this.drawSceneFigures()},r.prototype.drawSceneFigures=function(){this._rasterizer.clear();for(var t=function(t){var n=r._scene.figures.find((function(e){return e.name===t.name})),i=r.getModelViewMatrix(t),o=r.applyTransforms(n.vertices,i),a=e.transpose(e.inverse3by3Matrix(e.getSubMatrix(i,3,3))),s=r.applyNormalsTransforms(a,n.triangles);if(0===(s=r._clipper.clip(o,s)).length)return"continue";var l=r.applyProjections(o);r.renderTriangles(l,o,s)},r=this,n=0,i=this._scene.instances;n<i.length;n++)t(i[n]);this._rasterizer.flush()},r.prototype.renderTriangles=function(t,e,r){for(var n=0,i=r;n<i.length;n++){var o=i[n];S.OnlyWired||this.drawFilledTriangle(t,e,o),this.drawWiredTriangle(t,e,o)}},r.prototype.drawWiredTriangle=function(t,e,r){var n=t[r.indices[0]],i=t[r.indices[1]],o=t[r.indices[2]],a=this.getVertexColor(e[r.indices[0]],r.normals[0],r.colors[0]),s=this.getVertexColor(e[r.indices[1]],r.normals[1],r.colors[1]),l=this.getVertexColor(e[r.indices[2]],r.normals[2],r.colors[2]);this._rasterizer.drawLine(n,i,a,s),this._rasterizer.drawLine(i,o,s,l),this._rasterizer.drawLine(o,n,l,a)},r.prototype.drawFilledTriangle=function(t,e,r){var n=t[r.indices[0]],i=t[r.indices[1]],o=t[r.indices[2]],a=this.getVertexColor(e[r.indices[0]],r.normals[0],r.colors[0]),s=this.getVertexColor(e[r.indices[1]],r.normals[1],r.colors[1]),l=this.getVertexColor(e[r.indices[2]],r.normals[2],r.colors[2]);this._rasterizer.drawFilledTriangle(n,i,o,a,s,l)},r.prototype.getVertexColor=function(t,e,r){return this._lightCalculator.calculateColor(t,e,r)},r.prototype.getModelViewMatrix=function(t){var r=B.getScaleMatrix(t.scale),n=B.getRotationMatrix(t.rotation),i=B.getTranslationMatrix(t.translate);return e.multMatrix(i,e.multMatrix(n,r))},r.prototype.applyNormalsTransforms=function(r,i){for(var o=[],a=0,s=i;a<s.length;a++){var l=s[a],h=l.normals.map((function(n){var i=e.mult(r,n);return new t(i[0],i[1],i[2]).getNormalized()}));o.push(new n(l.indices,l.colors,h))}return o},r.prototype.applyTransforms=function(r,n){return r.map((function(r){var i=e.mult(n,r);return new t(i[0],i[1],i[2])}))},r.prototype.applyProjections=function(t){var e=this.applyProjection(t),r=this.applyCanvasProjection(e);return this.applyCanvasCenteringAndYAxisInverse(r)},r.prototype.applyProjection=function(e){var r=this;return e.map((function(e){return new t(e.x*r._scene.camera.frustum.near/e.z,e.y*r._scene.camera.frustum.near/e.z,1/e.z)}))},r.prototype.applyCanvasCenteringAndYAxisInverse=function(e){var r=this._canvasSettings.width/2,n=this._canvasSettings.height/2;return e.map((function(e){return new t(Math.max(e.x+r-1,0),Math.max(n-e.y-1),e.z)}))},r.prototype.applyCanvasProjection=function(e){var r=this._scene.camera.frustum,n=this._canvasSettings.width/r.nearPlaneWidth,i=this._canvasSettings.height/r.nearPlaneHeight;return e.map((function(e){return new t(e.x*n,e.y*i,e.z)}))},r}();(new(function(){function t(){var t=document.getElementById("rastCanvas").getContext("2d"),e=new u(800,600),r=new g(e),n=new f(t,e,[r]),i=N.loadScene(e.aspectRatio),o=new h(i.camera.frustum);this._renderer=new F(i,o,n,e)}return t.prototype.start=function(){this._renderer.start()},t}())).start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,